// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using LiteDbExplorer.Mac.Models;
using System.Collections.Specialized;
using System.Collections.Generic;
using System.Linq;

namespace LiteDbExplorer.Mac
{
    public partial class DbNavViewController : NSViewController
    {
        private bool _initialized;
        private NSMutableArray<DbNavigationNode> _databases = new NSMutableArray<DbNavigationNode>();

        public DbNavViewController (IntPtr handle) : base (handle)
        {
        }

        [Export(nameof(Databases))]
        public NSArray Databases
        {
            get { return _databases; }
        }

        public override void AwakeFromNib()
        {
            base.AwakeFromNib();

            if (_initialized || dbNavOutlineView == null)
            {
                return;
            }

            SessionData.Current.Databases.CollectionChanged -= Databases_CollectionChanged;
            SessionData.Current.Databases.CollectionChanged += Databases_CollectionChanged;

            var dbNavOutlineViewDelegate = new DbNavOutlineDelegate();

            dbNavOutlineViewDelegate.MenuForItem = GetMenuForItem;

            dbNavOutlineViewDelegate.NodeSelected += DbNavOutlineViewDelegate_NodeSelected;

            dbNavOutlineView.Delegate = dbNavOutlineViewDelegate;

            _initialized = true;
        }

        private NSMenu GetMenuForItem(NSOutlineView outlineView, NSObject item)
        {
            foreach (var menuItem in dbNavMenu.Items)
            {
                menuItem.Activated -= MenuItem_Activated;
            }

            var node = item as NSTreeNode;
            if (node?.RepresentedObject is DbNavigationNode dbNode)
            {
                foreach (var menuItem in dbNavMenu.Items)
                {
                    menuItem.Activated += MenuItem_Activated;
                    menuItem.RepresentedObject = dbNode;
                }

                return dbNavMenu;
            }

            return null;
        }

        protected void MenuItem_Activated(object sender, EventArgs e)
        {
            var menuItem = sender as NSMenuItem;
            if (menuItem?.RepresentedObject is DbNavigationNode dbNode)
            {
                switch(menuItem.Tag)
                {
                    case 4:
                        SessionData.Current.CloseDatabase(dbNode.InstanceId);
                        break;
                }
            }
        }


        private void DbNavOutlineViewDelegate_NodeSelected(object sender, ElementNodeEventArgs e)
        {
            SessionData.Current.SelectNode(e.NodeType, e.InstanceId);
        }


        [Export("dbNavClick:")]
        protected void DbNavClick(NSObject sender)
        {
            // Console.WriteLine("dbNavClick:");
        }

        [Export("dbNavDoubleClick:")]
        protected void DbNavDoubleClick(NSObject sender)
        {
            // Console.WriteLine("dbNavDoubleClick:");
        }

        private void Databases_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.Action == NotifyCollectionChangedAction.Add)
            {
                foreach (var database in SessionData.Current.Databases)
                {
                    var dbNav = new DbNavigationNode
                    {
                        InstanceId = database.InstanceId,
                        Name = database.Name,
                        NodeType = DbNavigationNodeType.Database
                    };

                    foreach (var collection in database.Collections)
                    {
                        var nodeType = collection is FileCollectionReference ? DbNavigationNodeType.FileCollection : DbNavigationNodeType.Collection;
                        dbNav.AddChildren(new DbNavigationNode
                        {
                            InstanceId = collection.InstanceId,
                            Name = collection.Name,
                            NodeType = nodeType
                        });
                    }

                    AddDatabase(dbNav);
                }
            }
            else if (e.Action == NotifyCollectionChangedAction.Remove)
            {
                if (e.OldItems == null)
                {
                    return;
                }

                var indexToRemove = new HashSet<nuint>();
                foreach (var dbRef in e.OldItems.OfType<DatabaseReference>())
                {
                    for (nuint i = 0; i < _databases.Count; i++)
                    {
                        var dbNavNode = _databases.GetItem<DbNavigationNode>(i);
                        if (dbNavNode != null && dbNavNode.InstanceId.Equals(dbRef.InstanceId))
                        {
                            indexToRemove.Add(i);
                        }
                    }
                }
                foreach (var index in indexToRemove)
                {
                    RemoveDatabase((nint)index);
                }
            }
            else if (e.Action == NotifyCollectionChangedAction.Reset)
            {
                ClearDatabases();
            }
        }


        [Export("addObject:")]
        public void AddDatabase(DbNavigationNode node)
        {
            WillChangeValue(nameof(Databases));
            _databases.Add(node);
            DidChangeValue(nameof(Databases));
        }

        [Export("insertObject:inInsertDatabasesAtIndex:")]
        public void InsertDatabase(DbNavigationNode node, nint index)
        {
            WillChangeValue(nameof(Databases));
            _databases.Insert(node, index);
            DidChangeValue(nameof(Databases));
        }

        [Export("removeObjectFromDatabasesAtIndex:")]
        public void RemoveDatabase(nint index)
        {
            WillChangeValue(nameof(Databases));
            _databases.RemoveObject(index);
            DidChangeValue(nameof(Databases));
        }

        [Export("setDatabasesArray:")]
        public void SetDatabases(NSMutableArray<DbNavigationNode> array)
        {
            WillChangeValue(nameof(Databases));
            _databases = array;
            DidChangeValue(nameof(Databases));
        }

        public void ClearDatabases()
        {
            WillChangeValue(nameof(Databases));
            _databases.RemoveAllObjects();
            DidChangeValue(nameof(Databases));
        }
    }
}
