// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using Foundation;
using AppKit;
using LiteDbExplorer.Mac.Models;
using LiteDbExplorer.Mac.Converters;

namespace LiteDbExplorer.Mac
{
	public partial class ListCollectionViewController : NSViewController
	{
        private bool _initialized;

        public ListCollectionViewController (IntPtr handle) : base (handle)
		{
		}

        public override void AwakeFromNib()
        {
            base.AwakeFromNib();

            if (_initialized || listCollectionTable == null)
            {
                return;
            }

            SessionData.Current.SelectedCollectionChange -= OnSelectedCollectionChange;
            SessionData.Current.SelectedCollectionChange += OnSelectedCollectionChange;

            listCollectionTable.Delegate = new ListCollectionTableDelegate();

            _initialized = true;
        }

        private void OnSelectedCollectionChange(object sender, EventArgs<CollectionReference> e)
        {
            if (listCollectionTable == null)
            {
                return;
            }

            while(listCollectionTable.ColumnCount > 0) {
                listCollectionTable.RemoveColumn(listCollectionTable.TableColumns().Last());
            }

            if (e.Data != null) 
            {
                var keys = new List<string>();
                foreach (var item in e.Data.Items)
                {
                    keys = item.LiteDocument.Keys.Union(keys).ToList();
                }

                foreach (var key in keys)
                {
                    var tableColumn = new NSTableColumn
                    {
                        HeaderCell =
                    {
                        Title = key
                    },
                        Identifier = key
                    };
                    listCollectionTable.AddColumn(tableColumn);
                }
            }

            var dataSource = new ListCollectionTableDataSource(e.Data);
            listCollectionTable.DataSource = dataSource;
            listCollectionTable.Delegate = new ListCollectionTableDelegate(dataSource);
        }
    }

    public class ListCollectionTableDataSource : NSTableViewDataSource
    {
        public ListCollectionTableDataSource()
        {
        }

        public ListCollectionTableDataSource(CollectionReference collectionReference)
        {
            CollectionReference = collectionReference;
        }
        
        public CollectionReference CollectionReference { get; }
        
        #region Override Methods
        
        public override nint GetRowCount (NSTableView tableView)
        {
            return CollectionReference?.Items?.Count ?? 0;
        }
        
        #endregion
    }
	
    public class ListCollectionTableDelegate : NSTableViewDelegate
    {
        public ListCollectionTableDelegate()
        {
        }

        public ListCollectionTableDelegate(ListCollectionTableDataSource dataSource)
        {
            DataSource = dataSource;
        }
        
        public ListCollectionTableDataSource DataSource { get; }

        public override NSView GetViewForItem(NSTableView tableView, NSTableColumn tableColumn, nint row)
        {
            // This pattern allows you reuse existing views when they are no-longer in use.
            // If the returned view is null, you instance up a new view
            // If a non-null view is returned, you modify it enough to reflect the new data
            NSTextField view = (NSTextField)tableView.MakeView(tableColumn.Identifier, this);
            if (view == null)
            {
                view = new NSTextField
                {
                    Identifier = tableColumn.Identifier,
                    BackgroundColor = NSColor.Clear,
                    LineBreakMode = NSLineBreakMode.TruncatingTail,
                    Bordered = false,
                    Selectable = false,
                    Editable = false,
                    ControlSize = NSControlSize.Regular
                };
            }

            var stringValue = BsonValueToStringConverter.Convert(DataSource.CollectionReference.Items[(int)row].LiteDocument[tableColumn.Identifier]);

            view.StringValue = stringValue;

            return view;
        }

        public override bool ShouldReorder(NSTableView tableView, nint columnIndex, nint newColumnIndex)
        {
            return false;
        }
    }

}
