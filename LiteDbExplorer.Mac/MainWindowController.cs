// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;

using Foundation;
using AppKit;
using CoreGraphics;
using LiteDbExplorer.Mac.Models;
using LiteDB;

namespace LiteDbExplorer.Mac
{
	public partial class MainWindowController : NSWindowController, IDisposable
	{
		public MainWindowController (IntPtr handle) : base (handle)
		{
		}

        public bool ShowSaveAsSheet { get; set; } = true;

        public bool ShowOpenAsSheet { get; set; } = true;
        
        public ObservableCollection<DatabaseReference> Databases
        {
            get; set;
        } = new ObservableCollection<DatabaseReference>();

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
            
            foreach (var db in Databases)
            {
                db.Dispose();
            }
        }

        [Export("newDatabase:")]
        protected async void NewDatabase(NSObject sender)
        {
            var path = await UIDialog.OpenFileDialog("Save Database", ShowSaveAsSheet ? Window : null);
            if (path.HasValue)
            {
                try
                {
                    HandleCreateDatabase(path.Value);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                    UIDialog.ShowAlert("Database Error", $"Failed to create database: {e.Message}", NSAlertStyle.Critical);
                }
            }
        }

        [Export("openDatabase:")]
        protected async void OpenDatabase(NSObject sender)
        {
            var path = await UIDialog.OpenFileDialog("Open Database", ShowOpenAsSheet ? Window : null);
            if (path.HasValue)
            {
                try
                {
                    HandleOpenDatabase(path.Value);
                }
                catch (Exception e)
                {
                    UIDialog.ShowAlert("Database Error", $"Failed to open database: {e.Message}", NSAlertStyle.Critical);
                }
            }
        }

        private void HandleCreateDatabase(string path) 
        {
            using (var stream = new FileStream(path, System.IO.FileMode.Create))
            {
                LiteEngine.CreateDatabase(stream);
            }

            HandleOpenDatabase(path);
        }

        private void HandleOpenDatabase(string path)
        {
            if (Databases.FirstOrDefault(a => a.Location == path) != null)
            {
                return;
            }

            if (!File.Exists(path))
            {
                UIDialog.ShowAlert(
                    "File not found",
                    "Cannot open database, file not found.",
                    NSAlertStyle.Critical);
                return;
            }
            
            try
            {
                string password = null;
                if (DatabaseReference.IsDbPasswordProtected(path))
                {
                    if (UIDialog.ShowInputAlert(Window, "Database is password protected, enter password:", "Database password.", "", out password) != true)
                    {
                        return;
                    }
                }

                Databases.Add(new DatabaseReference(path, password));
            }
            catch (Exception e)
            {
                UIDialog.ShowAlert(
                    "Database Error",
                    "Failed to open database:" + Environment.NewLine + e.Message,  
                    NSAlertStyle.Critical);
                // Logger.Error(e, "Failed to process update: ");
            }
        }
        

    }
}
