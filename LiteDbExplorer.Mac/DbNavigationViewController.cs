// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using LiteDbExplorer.Mac.Models;
using System.Collections.Specialized;

namespace LiteDbExplorer.Mac
{
	public partial class DbNavigationViewController : NSViewController
	{
        private NSMutableArray _databases = new NSMutableArray();

        public DbNavigationViewController (IntPtr handle) : base (handle)
		{
		}

        [Export(nameof(Databases))]
        public NSArray Databases
        {
            get { return _databases; }
        }

        public override void AwakeFromNib()
        {
            if(_databases.Count > 0) 
            {
                return;
            }

            base.AwakeFromNib();

            SessionData.Current.Databases.CollectionChanged -= Databases_CollectionChanged;
            SessionData.Current.Databases.CollectionChanged += Databases_CollectionChanged;
        }

        private void Databases_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if(e.Action == NotifyCollectionChangedAction.Add)
            {
                foreach (var database in SessionData.Current.Databases)
                {
                    var dbNav = new DbNavigationNode
                    {
                        InstanceId = database.InstanceId,
                        Name = database.Name,
                        NodeType = DbNavigationNodeType.Database
                    };

                    foreach (var collection in database.Collections)
                    {
                        var nodeType = collection is FileCollectionReference ? DbNavigationNodeType.FileCollection : DbNavigationNodeType.Collection;
                        dbNav.AddChildren(new DbNavigationNode
                        {
                            InstanceId = collection.InstanceId,
                            Name = collection.Name,
                            NodeType = nodeType
                        });
                    }

                    AddDatabase(dbNav);
                }
            }
        }


        [Export("addObject:")]
        public void AddDatabase(DbNavigationNode node)
        {
            WillChangeValue(nameof(Databases));
            _databases.Add(node);
            DidChangeValue(nameof(Databases));
        }

        [Export("insertObject:inInsertDatabasesAtIndex:")]
        public void InsertDatabase(DbNavigationNode node, nint index)
        {
            WillChangeValue(nameof(Databases));
            _databases.Insert(node, index);
            DidChangeValue(nameof(Databases));
        }

        [Export("removeObjectFromDatabasesAtIndex:")]
        public void RemoveDatabase(nint index)
        {
            WillChangeValue(nameof(Databases));
            _databases.RemoveObject(index);
            DidChangeValue(nameof(Databases));
        }

        [Export("setDatabasesArray:")]
        public void SetDatabases(NSMutableArray array)
        {
            WillChangeValue(nameof(Databases));
            _databases = array;
            DidChangeValue(nameof(Databases));
        }
    }
}
